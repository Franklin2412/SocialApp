angular.module("app",["ngRoute"]),angular.module("app").controller("PostsCtrl",["$scope","PostService",function(t,e){e.fetchPosts().success(function(e){t.posts=e}),t.addPosts=function(){console.log(new Date),t.postBody&&e.createPosts({username:"piyush",body:t.postBody,date:new Date}).success(function(e){t.posts.unshift(e),t.postBody=""})}}]),angular.module("app").service("PostService",["$http",function(t){this.fetchPosts=function(){return t.get("/api/posts")},this.createPosts=function(e){return t.post("/api/posts",e)}}]),angular.module("app").service("RegistrationService",["$http",function(t){var e=this;e.registerNewUser=function(e,o){return t.post("/api/users",{username:e,password:o})}}]),angular.module("app").controller("RegisterCtrl",["$scope","RegistrationService","UserService",function(t,e,o){t.registerNewUser=function(n,r){e.registerNewUser(n,r).then(function(e){console.log(e.status),201==e.status&&o.login(n,r).then(function(e){t.$emit("login",e.data)})})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").controller("ApplicationCtrl",["$scope","$location",function(t,e){t.$on("login",function(o,n){e.path("/"),t.currentUser=n,console.log(t.currentUser)})}]),angular.module("app").controller("LoginCtrl",["$scope","UserService",function(t,e){t.login=function(o,n){e.login(o,n).then(function(e){t.$emit("login",e.data)})}}]),angular.module("app").service("UserService",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users",{headers:{"x-auth":this.token}})},e.login=function(o,n){return t.post("/api/sessions",{username:o,password:n}).then(function(o){return e.token=o.data,t.defaults.headers.common["x-auth"]=o.data,e.getUser()})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLW1vZHVsZS5qcyIsInBvc3RDdHJsLmpzIiwicG9zdFNlcnZpY2UuanMiLCJyZWdpc3RhcnRpb25TZXJ2aWNlLmpzIiwicmVnaXN0ZXJDdHJsLmpzIiwicm91dGUuanMiLCJ1YXBwbGljYXRpb25DdHJsLmpzIiwidXNlckN0cmwuanMiLCJ1c2VyU2VydmljZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIlBvc3RTZXJ2aWNlIiwiZmV0Y2hQb3N0cyIsInN1Y2Nlc3MiLCJwb3N0cyIsImFkZFBvc3RzIiwiY29uc29sZSIsImxvZyIsIkRhdGUiLCJwb3N0Qm9keSIsImNyZWF0ZVBvc3RzIiwidXNlcm5hbWUiLCJib2R5IiwiZGF0ZSIsInBvc3QiLCJ1bnNoaWZ0Iiwic2VydmljZSIsIiRodHRwIiwidGhpcyIsImdldCIsInJzdmMiLCJyZWdpc3Rlck5ld1VzZXIiLCJwYXNzd29yZCIsIlJlZ2lzdHJhdGlvblNlcnZpY2UiLCJVc2VyU2VydmljZSIsInRoZW4iLCJyZXNwb25zZSIsInN0YXR1cyIsImxvZ2luIiwiJGVtaXQiLCJkYXRhIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCIkbG9jYXRpb24iLCIkb24iLCJfIiwidXNlciIsInBhdGgiLCJjdXJyZW50VXNlciIsInN2YyIsImdldFVzZXIiLCJoZWFkZXJzIiwieC1hdXRoIiwidG9rZW4iLCJ2YWwiLCJkZWZhdWx0cyIsImNvbW1vbiJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQUFDLE9BQUEsT0FDQSxZQ0RBRCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLGNBQUEsU0FBQUMsRUFBQUMsR0FDQUEsRUFBQUMsYUFDQUMsUUFBQSxTQUFBQyxHQUNBSixFQUFBSSxNQUFBQSxJQUVBSixFQUFBSyxTQUFBLFdBQ0FDLFFBQUFDLElBQUEsR0FBQUMsT0FDQVIsRUFBQVMsVUFDQVIsRUFBQVMsYUFDQUMsU0FBQSxTQUNBQyxLQUFBWixFQUFBUyxTQUNBSSxLQUFBLEdBQUFMLFFBQ0FMLFFBQUEsU0FBQVcsR0FDQWQsRUFBQUksTUFBQVcsUUFBQUQsR0FDQWQsRUFBQVMsU0FBQSxTQ2ZBWixRQUFBQyxPQUFBLE9BQ0FrQixRQUFBLGVBQUEsUUFBQSxTQUFBQyxHQUNBQyxLQUFBaEIsV0FBQSxXQUNBLE1BQUFlLEdBQUFFLElBQUEsZUFFQUQsS0FBQVIsWUFBQSxTQUFBSSxHQUNBLE1BQUFHLEdBQUFILEtBQUEsYUFBQUEsT0NOQWpCLFFBQUFDLE9BQUEsT0FDQWtCLFFBQUEsdUJBQUEsUUFBQSxTQUFBQyxHQUNBLEdBQUFHLEdBQUFGLElBQ0FFLEdBQUFDLGdCQUFBLFNBQUFWLEVBQUFXLEdBQ0EsTUFBQUwsR0FBQUgsS0FBQSxjQUNBSCxTQUFBQSxFQUNBVyxTQUFBQSxRQ05BekIsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGdCQUFBLFNBQUEsc0JBQUEsY0FBQSxTQUFBQyxFQUFBdUIsRUFBQUMsR0FDQXhCLEVBQUFxQixnQkFBQSxTQUFBVixFQUFBVyxHQUNBQyxFQUFBRixnQkFBQVYsRUFBQVcsR0FDQUcsS0FBQSxTQUFBQyxHQUNBcEIsUUFBQUMsSUFBQW1CLEVBQUFDLFFBQ0EsS0FBQUQsRUFBQUMsUUFDQUgsRUFBQUksTUFBQWpCLEVBQUFXLEdBQ0FHLEtBQUEsU0FBQUMsR0FDQTFCLEVBQUE2QixNQUFBLFFBQUFILEVBQUFJLGNDVEFqQyxRQUFBQyxPQUFBLE9BQ0FpQyxRQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsS0FBQWxDLFdBQUEsWUFBQW1DLFlBQUEsZUFDQUQsS0FBQSxhQUFBbEMsV0FBQSxlQUFBbUMsWUFBQSxrQkFDQUQsS0FBQSxVQUFBbEMsV0FBQSxZQUFBbUMsWUFBQSxrQkNMQXJDLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFlBQUEsU0FBQUMsRUFBQW1DLEdBQ0FuQyxFQUFBb0MsSUFBQSxRQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFJLEtBQUEsS0FDQXZDLEVBQUF3QyxZQUFBRixFQUNBaEMsUUFBQUMsSUFBQVAsRUFBQXdDLGtCQ0xBM0MsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxjQUFBLFNBQUFDLEVBQUF3QixHQUNBeEIsRUFBQTRCLE1BQUEsU0FBQWpCLEVBQUFXLEdBQ0FFLEVBQUFJLE1BQUFqQixFQUFBVyxHQUNBRyxLQUFBLFNBQUFDLEdBQ0ExQixFQUFBNkIsTUFBQSxRQUFBSCxFQUFBSSxZQ0xBakMsUUFBQUMsT0FBQSxPQUNBa0IsUUFBQSxlQUFBLFFBQUEsU0FBQUMsR0FDQSxHQUFBd0IsR0FBQXZCLElBQ0F1QixHQUFBQyxRQUFBLFdBQ0EsTUFBQXpCLEdBQUFFLElBQUEsY0FDQXdCLFNBQUFDLFNBQUExQixLQUFBMkIsVUFHQUosRUFBQWIsTUFBQSxTQUFBakIsRUFBQVcsR0FDQSxNQUFBTCxHQUFBSCxLQUFBLGlCQUNBSCxTQUFBQSxFQUNBVyxTQUFBQSxJQUNBRyxLQUFBLFNBQUFxQixHQUdBLE1BRkFMLEdBQUFJLE1BQUFDLEVBQUFoQixLQUNBYixFQUFBOEIsU0FBQUosUUFBQUssT0FBQSxVQUFBRixFQUFBaEIsS0FDQVcsRUFBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsW1xuXHQnbmdSb3V0ZSdcblx0XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUG9zdHNDdHJsJyxmdW5jdGlvbigkc2NvcGUsIFBvc3RTZXJ2aWNlICl7XG5cdFBvc3RTZXJ2aWNlLmZldGNoUG9zdHMoKVxuXHQuc3VjY2VzcyhmdW5jdGlvbiggcG9zdHMgKXtcblx0XHQkc2NvcGUucG9zdHM9cG9zdHM7XG5cdH0pO1xuXHQkc2NvcGUuYWRkUG9zdHMgPSBmdW5jdGlvbigpe1xuXHRcdGNvbnNvbGUubG9nKG5ldyBEYXRlKCkpO1xuXHRcdGlmKCRzY29wZS5wb3N0Qm9keSl7XG5cdFx0UG9zdFNlcnZpY2UuY3JlYXRlUG9zdHMoe1xuXHRcdFx0dXNlcm5hbWU6J3BpeXVzaCcsXG5cdFx0XHRib2R5IDogJHNjb3BlLnBvc3RCb2R5LFxuXHRcdFx0ZGF0ZTogbmV3IERhdGUoKVxuXHRcdH0pLnN1Y2Nlc3MoZnVuY3Rpb24oIHBvc3QgKXtcblx0XHRcdCRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpO1xuXHRcdFx0JHNjb3BlLnBvc3RCb2R5PVwiXCI7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1Bvc3RTZXJ2aWNlJywgZnVuY3Rpb24oJGh0dHApe1xuXHR0aGlzLmZldGNoUG9zdHM9ZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XG5cdH07XG5cdHRoaXMuY3JlYXRlUG9zdHM9ZnVuY3Rpb24ocG9zdCl7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnICxwb3N0KVxuXHR9O1xufSk7IiwiYW5ndWxhci5tb2R1bGUoXCJhcHBcIilcbi5zZXJ2aWNlKCdSZWdpc3RyYXRpb25TZXJ2aWNlJywgZnVuY3Rpb24oJGh0dHApe1xuXHR2YXIgcnN2Yz10aGlzO1xuXHRyc3ZjLnJlZ2lzdGVyTmV3VXNlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCl7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLHtcblx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSxcblx0XHRcdHBhc3N3b3JkOiBwYXNzd29yZFxuXHRcdH0pO1xuXHR9O1xufSk7IiwiYW5ndWxhci5tb2R1bGUoXCJhcHBcIilcbi5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbigkc2NvcGUsIFJlZ2lzdHJhdGlvblNlcnZpY2UsIFVzZXJTZXJ2aWNlKXtcblx0JHNjb3BlLnJlZ2lzdGVyTmV3VXNlcj0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKXtcblx0XHRSZWdpc3RyYXRpb25TZXJ2aWNlLnJlZ2lzdGVyTmV3VXNlcih1c2VybmFtZSxwYXNzd29yZClcblx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRjb25zb2xlLmxvZyhyZXNwb25zZS5zdGF0dXMpO1xuXHRcdFx0aWYocmVzcG9uc2Uuc3RhdHVzPT0yMDEpe1xuXHRcdFx0XHRVc2VyU2VydmljZS5sb2dpbiggdXNlcm5hbWUsIHBhc3N3b3JkKVxuXHRcdFx0XHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRcdFx0XHRcdFx0JHNjb3BlLiRlbWl0KCdsb2dpbicscmVzcG9uc2UuZGF0YSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29uZmlnKCBmdW5jdGlvbiAoICRyb3V0ZVByb3ZpZGVyKXtcblx0JHJvdXRlUHJvdmlkZXJcblx0LndoZW4oICcvJyAsIHsgY29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsIHRlbXBsYXRlVXJsOiAncG9zdHMuaHRtbCd9KVxuXHQud2hlbiggJy9yZWdpc3RlcicgLCB7IGNvbnRyb2xsZXI6ICdSZWdpc3RlckN0cmwnLCB0ZW1wbGF0ZVVybDogJ3JlZ2lzdGVyLmh0bWwnIH0pXG5cdC53aGVuKCAnL2xvZ2luJyAsIHsgY29udHJvbGxlcjogJ0xvZ2luQ3RybCcsIHRlbXBsYXRlVXJsOiAnbG9naW4uaHRtbCcgfSlcbn0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJyxmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uKXtcblx0JHNjb3BlLiRvbignbG9naW4nLGZ1bmN0aW9uKCBfICwgdXNlciApe1xuXHRcdCRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcblx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyOyBcblx0XHRjb25zb2xlLmxvZygkc2NvcGUuY3VycmVudFVzZXIpO1xuXHR9KTtcblxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5DdHJsJyxmdW5jdGlvbigkc2NvcGUsIFVzZXJTZXJ2aWNlICl7XG5cdCRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKCB1c2VybmFtZSwgcGFzc3dvcmQgKXtcblx0XHRVc2VyU2VydmljZS5sb2dpbiggdXNlcm5hbWUsIHBhc3N3b3JkKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0XHQkc2NvcGUuJGVtaXQoJ2xvZ2luJyxyZXNwb25zZS5kYXRhKTtcblx0XHRcdFx0XG5cdFx0XHR9KTtcblx0fTtcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1VzZXJTZXJ2aWNlJyxmdW5jdGlvbigkaHR0cCl7XG5cdHZhciBzdmMgPSB0aGlzO1xuXHRzdmMuZ2V0VXNlcj0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJyx7XG5cdFx0XHRoZWFkZXJzOnsgJ3gtYXV0aCc6IHRoaXMudG9rZW59XG5cdFx0fSk7XG5cdH07XG5cdHN2Yy5sb2dpbj1mdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpe1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuXHRcdFx0dXNlcm5hbWU6IHVzZXJuYW1lLFxuXHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0fSkudGhlbihmdW5jdGlvbih2YWwpe1xuXHRcdFx0c3ZjLnRva2VuID0gdmFsLmRhdGE7XG5cdFx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsneC1hdXRoJ109IHZhbC5kYXRhO1xuXHRcdFx0cmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG5cdFx0fSk7XG5cdH07XG5cdFxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9